// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vtjnknpfeonpzlphsraa.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ0am5rbnBmZW9ucHpscGhzcmFhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzc4MDMzNjYsImV4cCI6MjA1MzM3OTM2Nn0.lvLNbOJQc7-yrSqrtFwP3sYIjqZ6qDZ1BX4D5TaeIkY";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: localStorage,
      detectSessionInUrl: true,
      flowType: 'pkce',
      debug: false,
      cookieOptions: {
        sameSite: 'strict',
        secure: true,
        httpOnly: true
      }
    },
    global: {
      headers: {
        'X-Client-Info': 'abstractchainai-web',
      },
    },
    realtime: {
      // Empty config using valid options only
    },
  }
);

/**
 * Helper function to clean up auth state
 * This helps prevent auth "limbo" states and session issues
 */
export const cleanupAuthState = () => {
  // Remove all Supabase auth keys from localStorage
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      localStorage.removeItem(key);
    }
  });
  
  // Remove from sessionStorage if in use
  if (typeof sessionStorage !== 'undefined') {
    Object.keys(sessionStorage).forEach((key) => {
      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
        sessionStorage.removeItem(key);
      }
    });
  }
};

/**
 * Secure logout function to prevent auth limbo state
 */
export const secureSignOut = async () => {
  try {
    // Clean up auth state first
    cleanupAuthState();
    
    // Attempt global sign out (fallback if it fails)
    try {
      await supabase.auth.signOut({ scope: 'global' });
    } catch (err) {
      console.error('Global sign out failed, falling back:', err);
    }
    
    return true;
  } catch (error) {
    console.error('Sign out error:', error);
    throw error;
  }
};

// Enhanced session monitoring
export const checkSessionValidity = async () => {
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    if (error) {
      console.error('Session check error:', error);
      return false;
    }
    
    // Check if session is about to expire (within 5 minutes)
    if (session?.expires_at) {
      const expiresAt = new Date(session.expires_at * 1000);
      const now = new Date();
      const fiveMinutes = 5 * 60 * 1000;
      
      if (expiresAt.getTime() - now.getTime() < fiveMinutes) {
        // Attempt to refresh session
        const { error: refreshError } = await supabase.auth.refreshSession();
        if (refreshError) {
          console.error('Failed to refresh session:', refreshError);
          return false;
        }
      }
      
      return true;
    }
    
    return !!session;
  } catch (err) {
    console.error('Session validation error:', err);
    return false;
  }
};
